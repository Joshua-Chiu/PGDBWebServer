# Generated by Django 2.2.8 on 2020-01-16 23:41

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('autofocus', models.IntegerField(choices=[(1, 'Service'), (2, 'Athletics'), (3, 'Fine Arts'), (4, 'Scholar T1'), (5, 'Scholar T2')], default=1)),
                ('first_visit', models.BooleanField(default=True)),
                ('header_colour', models.CharField(default='#ADD8E6', max_length=7)),
                ('page_colour', models.CharField(default='#ADD8E6', max_length=7)),
                ('alternate_row_colour', models.CharField(default='#7AD7F0', max_length=7)),
                ('text_colour', models.CharField(default='#000000', max_length=7)),
                ('collapsible_bar_colour', models.CharField(default='#eeeeee', max_length=7)),
                ('can_view', models.BooleanField(default=False, help_text='Designates whether the user can see the student view with all the data. Note: If a user is a superuser, this is disregarded.', verbose_name='Can view student page with all information')),
                ('no_entry', models.BooleanField(default=True, help_text='Designates whether the user can enter data at the student view. Note: If a user is a superuser, this is disregarded.', verbose_name='Disable entry at student page')),
                ('can_upload', models.BooleanField(default=False, help_text='Designates whether the user can submit files for at direct entry pages. Note: If a user is a superuser, this is disregarded.', verbose_name='Bulk upload at Direct Entry')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
